// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: cloud_wallet/cloud_wallet.proto

package cloud_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudWalletErrCode int32

const (
	CloudWalletErrCode_ESC               CloudWalletErrCode = 0
	CloudWalletErrCode_ServerError       CloudWalletErrCode = 9999 // 9999 服务器错误
	CloudWalletErrCode_ServerNcountError CloudWalletErrCode = 8888 // 新生支付错误
	// 1000- 1999 云钱包相关错误
	CloudWalletErrCode_PacketStatusIsCreate    CloudWalletErrCode = 1000 // 红包状态是创建
	CloudWalletErrCode_PacketStatusIsFinish    CloudWalletErrCode = 1001 // 红包状态是完成
	CloudWalletErrCode_PacketStatusIsExpire    CloudWalletErrCode = 1002 // 红包状态是过期
	CloudWalletErrCode_PacketStatusIsExclusive CloudWalletErrCode = 1003 // 红包状态是独占
	CloudWalletErrCode_PacketStatusIsReceived  CloudWalletErrCode = 1004 // 红包状态是取消
	CloudWalletErrCode_PacketStatusIsBan       CloudWalletErrCode = 1005 // 该群禁止抢红包
	// 2- 用户相关的
	CloudWalletErrCode_UserNotValidate CloudWalletErrCode = 2000 // 用户未认证
)

// Enum value maps for CloudWalletErrCode.
var (
	CloudWalletErrCode_name = map[int32]string{
		0:    "ESC",
		9999: "ServerError",
		8888: "ServerNcountError",
		1000: "PacketStatusIsCreate",
		1001: "PacketStatusIsFinish",
		1002: "PacketStatusIsExpire",
		1003: "PacketStatusIsExclusive",
		1004: "PacketStatusIsReceived",
		1005: "PacketStatusIsBan",
		2000: "UserNotValidate",
	}
	CloudWalletErrCode_value = map[string]int32{
		"ESC":                     0,
		"ServerError":             9999,
		"ServerNcountError":       8888,
		"PacketStatusIsCreate":    1000,
		"PacketStatusIsFinish":    1001,
		"PacketStatusIsExpire":    1002,
		"PacketStatusIsExclusive": 1003,
		"PacketStatusIsReceived":  1004,
		"PacketStatusIsBan":       1005,
		"UserNotValidate":         2000,
	}
)

func (x CloudWalletErrCode) Enum() *CloudWalletErrCode {
	p := new(CloudWalletErrCode)
	*p = x
	return p
}

func (x CloudWalletErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudWalletErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_wallet_cloud_wallet_proto_enumTypes[0].Descriptor()
}

func (CloudWalletErrCode) Type() protoreflect.EnumType {
	return &file_cloud_wallet_cloud_wallet_proto_enumTypes[0]
}

func (x CloudWalletErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudWalletErrCode.Descriptor instead.
func (CloudWalletErrCode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{0}
}

// 通用消息回复组件
type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode CloudWalletErrCode `protobuf:"varint,1,opt,name=errCode,proto3,enum=cloud_wallet.CloudWalletErrCode" json:"errCode,omitempty"` //非0既有异常
	ErrMsg  string             `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResp) GetErrCode() CloudWalletErrCode {
	if x != nil {
		return x.ErrCode
	}
	return CloudWalletErrCode_ESC
}

func (x *CommonResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// 1. 获取云账户信息
type UserNcountAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	OperationID string `protobuf:"bytes,2,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
}

func (x *UserNcountAccountReq) Reset() {
	*x = UserNcountAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNcountAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNcountAccountReq) ProtoMessage() {}

func (x *UserNcountAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNcountAccountReq.ProtoReflect.Descriptor instead.
func (*UserNcountAccountReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *UserNcountAccountReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserNcountAccountReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type UserNcountAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step             int32            `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`                        //步骤
	IdCard           string           `protobuf:"bytes,2,opt,name=idCard,proto3" json:"idCard,omitempty"`                     //身份证
	RealName         string           `protobuf:"bytes,3,opt,name=realName,proto3" json:"realName,omitempty"`                 //真实姓名
	AccountStatus    int32            `protobuf:"varint,4,opt,name=accountStatus,proto3" json:"accountStatus,omitempty"`      //账户开通状态
	BalAmount        string           `protobuf:"bytes,5,opt,name=balAmount,proto3" json:"balAmount,omitempty"`               //账户余额
	AvailableBalance string           `protobuf:"bytes,6,opt,name=availableBalance,proto3" json:"availableBalance,omitempty"` //可用余额
	BindCardsList    []*BindCardsList `protobuf:"bytes,7,rep,name=bindCardsList,proto3" json:"bindCardsList,omitempty"`       //绑定的银行卡列表
	CommonResp       *CommonResp      `protobuf:"bytes,8,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *UserNcountAccountResp) Reset() {
	*x = UserNcountAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNcountAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNcountAccountResp) ProtoMessage() {}

func (x *UserNcountAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNcountAccountResp.ProtoReflect.Descriptor instead.
func (*UserNcountAccountResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *UserNcountAccountResp) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *UserNcountAccountResp) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserNcountAccountResp) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserNcountAccountResp) GetAccountStatus() int32 {
	if x != nil {
		return x.AccountStatus
	}
	return 0
}

func (x *UserNcountAccountResp) GetBalAmount() string {
	if x != nil {
		return x.BalAmount
	}
	return ""
}

func (x *UserNcountAccountResp) GetAvailableBalance() string {
	if x != nil {
		return x.AvailableBalance
	}
	return ""
}

func (x *UserNcountAccountResp) GetBindCardsList() []*BindCardsList {
	if x != nil {
		return x.BindCardsList
	}
	return nil
}

func (x *UserNcountAccountResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type BindCardsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindCardAgrNo string `protobuf:"bytes,1,opt,name=bindCardAgrNo,proto3" json:"bindCardAgrNo,omitempty"` //协议号
	BankCode      string `protobuf:"bytes,2,opt,name=bankCode,proto3" json:"bankCode,omitempty"`           //银行
	CardNo        string `protobuf:"bytes,3,opt,name=cardNo,proto3" json:"cardNo,omitempty"`               //卡号
	Mobile        string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`               //手机号码
	BindCardId    int32  `protobuf:"varint,5,opt,name=bindCardId,proto3" json:"bindCardId,omitempty"`      //银行卡id
}

func (x *BindCardsList) Reset() {
	*x = BindCardsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindCardsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCardsList) ProtoMessage() {}

func (x *BindCardsList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCardsList.ProtoReflect.Descriptor instead.
func (*BindCardsList) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *BindCardsList) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *BindCardsList) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *BindCardsList) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *BindCardsList) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *BindCardsList) GetBindCardId() int32 {
	if x != nil {
		return x.BindCardId
	}
	return 0
}

// 4. 云钱包收支明细
type CloudWalletRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	StartTime   string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`     //开始日期
	EndTime     string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`         //结束日期
	Page        int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`              //页码
	Size        int32  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`              //size
	OperationID string `protobuf:"bytes,6,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
}

func (x *CloudWalletRecordListReq) Reset() {
	*x = CloudWalletRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudWalletRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudWalletRecordListReq) ProtoMessage() {}

func (x *CloudWalletRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudWalletRecordListReq.ProtoReflect.Descriptor instead.
func (*CloudWalletRecordListReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *CloudWalletRecordListReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CloudWalletRecordListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CloudWalletRecordListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CloudWalletRecordListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CloudWalletRecordListReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CloudWalletRecordListReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type CloudWalletRecordListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	RecordList []*RecordList `protobuf:"bytes,2,rep,name=recordList,proto3" json:"recordList,omitempty"`
}

func (x *CloudWalletRecordListResp) Reset() {
	*x = CloudWalletRecordListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudWalletRecordListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudWalletRecordListResp) ProtoMessage() {}

func (x *CloudWalletRecordListResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudWalletRecordListResp.ProtoReflect.Descriptor instead.
func (*CloudWalletRecordListResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *CloudWalletRecordListResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CloudWalletRecordListResp) GetRecordList() []*RecordList {
	if x != nil {
		return x.RecordList
	}
	return nil
}

type RecordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Describe          string `protobuf:"bytes,1,opt,name=describe,proto3" json:"describe,omitempty"`                   //明细描述
	Amount            int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                      //变动金额
	CreatedTime       string `protobuf:"bytes,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`             //时间
	RelevancePacketId string `protobuf:"bytes,4,opt,name=relevancePacketId,proto3" json:"relevancePacketId,omitempty"` //关联红包id
	AfterAmount       int32  `protobuf:"varint,5,opt,name=afterAmount,proto3" json:"afterAmount,omitempty"`            //变更后余额
	Type              int32  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                          //收支类型(1收入、2支出)
	Id                int32  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`                              //记录id
}

func (x *RecordList) Reset() {
	*x = RecordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordList) ProtoMessage() {}

func (x *RecordList) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordList.ProtoReflect.Descriptor instead.
func (*RecordList) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *RecordList) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *RecordList) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RecordList) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *RecordList) GetRelevancePacketId() string {
	if x != nil {
		return x.RelevancePacketId
	}
	return ""
}

func (x *RecordList) GetAfterAmount() int32 {
	if x != nil {
		return x.AfterAmount
	}
	return 0
}

func (x *RecordList) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RecordList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 6.绑定用户银行卡
type BindUserBankcardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                       //用户id
	CardOwner         string `protobuf:"bytes,2,opt,name=cardOwner,proto3" json:"cardOwner,omitempty"`                 //持卡者
	BankCardNumber    string `protobuf:"bytes,3,opt,name=bankCardNumber,proto3" json:"bankCardNumber,omitempty"`       //银行卡号
	Mobile            string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`                       //手机号码
	CardAvailableDate string `protobuf:"bytes,5,opt,name=cardAvailableDate,proto3" json:"cardAvailableDate,omitempty"` //信用卡有效期
	Cvv2              string `protobuf:"bytes,6,opt,name=cvv2,proto3" json:"cvv2,omitempty"`                           //信用卡cvv2
	OperationID       string `protobuf:"bytes,7,opt,name=operationID,proto3" json:"operationID,omitempty"`             //链路跟踪id
}

func (x *BindUserBankcardReq) Reset() {
	*x = BindUserBankcardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserBankcardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserBankcardReq) ProtoMessage() {}

func (x *BindUserBankcardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserBankcardReq.ProtoReflect.Descriptor instead.
func (*BindUserBankcardReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *BindUserBankcardReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BindUserBankcardReq) GetCardOwner() string {
	if x != nil {
		return x.CardOwner
	}
	return ""
}

func (x *BindUserBankcardReq) GetBankCardNumber() string {
	if x != nil {
		return x.BankCardNumber
	}
	return ""
}

func (x *BindUserBankcardReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *BindUserBankcardReq) GetCardAvailableDate() string {
	if x != nil {
		return x.CardAvailableDate
	}
	return ""
}

func (x *BindUserBankcardReq) GetCvv2() string {
	if x != nil {
		return x.Cvv2
	}
	return ""
}

func (x *BindUserBankcardReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type BindUserBankcardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankCardId int32       `protobuf:"varint,1,opt,name=bankCardId,proto3" json:"bankCardId,omitempty"` //银行卡id
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *BindUserBankcardResp) Reset() {
	*x = BindUserBankcardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserBankcardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserBankcardResp) ProtoMessage() {}

func (x *BindUserBankcardResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserBankcardResp.ProtoReflect.Descriptor instead.
func (*BindUserBankcardResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *BindUserBankcardResp) GetBankCardId() int32 {
	if x != nil {
		return x.BankCardId
	}
	return 0
}

func (x *BindUserBankcardResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type UserRechargeConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	MerOrderId  string `protobuf:"bytes,2,opt,name=merOrderId,proto3" json:"merOrderId,omitempty"`   //订单号
	SmsCode     string `protobuf:"bytes,3,opt,name=smsCode,proto3" json:"smsCode,omitempty"`         //验证码
	OperationID string `protobuf:"bytes,4,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
}

func (x *UserRechargeConfirmReq) Reset() {
	*x = UserRechargeConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeConfirmReq) ProtoMessage() {}

func (x *UserRechargeConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeConfirmReq.ProtoReflect.Descriptor instead.
func (*UserRechargeConfirmReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *UserRechargeConfirmReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRechargeConfirmReq) GetMerOrderId() string {
	if x != nil {
		return x.MerOrderId
	}
	return ""
}

func (x *UserRechargeConfirmReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *UserRechargeConfirmReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type UserRechargeConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *UserRechargeConfirmResp) Reset() {
	*x = UserRechargeConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeConfirmResp) ProtoMessage() {}

func (x *UserRechargeConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeConfirmResp.ProtoReflect.Descriptor instead.
func (*UserRechargeConfirmResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *UserRechargeConfirmResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 绑定用户银行卡确认
type BindUserBankcardConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	BankCardId  int32  `protobuf:"varint,2,opt,name=bankCardId,proto3" json:"bankCardId,omitempty"`  //银行卡id
	MerOrderId  string `protobuf:"bytes,3,opt,name=merOrderId,proto3" json:"merOrderId,omitempty"`   //平台订单号
	SmsCode     string `protobuf:"bytes,4,opt,name=smsCode,proto3" json:"smsCode,omitempty"`         //验证码
	MerUserIp   string `protobuf:"bytes,5,opt,name=merUserIp,proto3" json:"merUserIp,omitempty"`     //用户ip
	OperationID string `protobuf:"bytes,6,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
}

func (x *BindUserBankcardConfirmReq) Reset() {
	*x = BindUserBankcardConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserBankcardConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserBankcardConfirmReq) ProtoMessage() {}

func (x *BindUserBankcardConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserBankcardConfirmReq.ProtoReflect.Descriptor instead.
func (*BindUserBankcardConfirmReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *BindUserBankcardConfirmReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BindUserBankcardConfirmReq) GetBankCardId() int32 {
	if x != nil {
		return x.BankCardId
	}
	return 0
}

func (x *BindUserBankcardConfirmReq) GetMerOrderId() string {
	if x != nil {
		return x.MerOrderId
	}
	return ""
}

func (x *BindUserBankcardConfirmReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *BindUserBankcardConfirmReq) GetMerUserIp() string {
	if x != nil {
		return x.MerUserIp
	}
	return ""
}

func (x *BindUserBankcardConfirmReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type BindUserBankcardConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankCardId int32       `protobuf:"varint,1,opt,name=bankCardId,proto3" json:"bankCardId,omitempty"` //银行卡id
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *BindUserBankcardConfirmResp) Reset() {
	*x = BindUserBankcardConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserBankcardConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserBankcardConfirmResp) ProtoMessage() {}

func (x *BindUserBankcardConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserBankcardConfirmResp.ProtoReflect.Descriptor instead.
func (*BindUserBankcardConfirmResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *BindUserBankcardConfirmResp) GetBankCardId() int32 {
	if x != nil {
		return x.BankCardId
	}
	return 0
}

func (x *BindUserBankcardConfirmResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 解绑绑定用户银行卡
type UnBindingUserBankcardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`               //用户id
	BindCardAgrNo string `protobuf:"bytes,2,opt,name=bindCardAgrNo,proto3" json:"bindCardAgrNo,omitempty"` //绑卡协议号
	OperationID   string `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID,omitempty"`     //链路跟踪id
}

func (x *UnBindingUserBankcardReq) Reset() {
	*x = UnBindingUserBankcardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBindingUserBankcardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBindingUserBankcardReq) ProtoMessage() {}

func (x *UnBindingUserBankcardReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBindingUserBankcardReq.ProtoReflect.Descriptor instead.
func (*UnBindingUserBankcardReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *UnBindingUserBankcardReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnBindingUserBankcardReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *UnBindingUserBankcardReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type UnBindingUserBankcardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *UnBindingUserBankcardResp) Reset() {
	*x = UnBindingUserBankcardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBindingUserBankcardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBindingUserBankcardResp) ProtoMessage() {}

func (x *UnBindingUserBankcardResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBindingUserBankcardResp.ProtoReflect.Descriptor instead.
func (*UnBindingUserBankcardResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *UnBindingUserBankcardResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 7.设置用户支付密码
type SetPaymentSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                  //设置类型(1设置密码、2忘记密码smsCode设置、3修改密码)
	Code                  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                                   //验证码
	PaymentSecret         string `protobuf:"bytes,3,opt,name=paymentSecret,proto3" json:"paymentSecret,omitempty"`                 //密码
	OperationID           string `protobuf:"bytes,4,opt,name=operationID,proto3" json:"operationID,omitempty"`                     //链路跟踪id
	UserId                string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`                               //用户id
	OriginalPaymentSecret string `protobuf:"bytes,6,opt,name=originalPaymentSecret,proto3" json:"originalPaymentSecret,omitempty"` //原支付密码
}

func (x *SetPaymentSecretReq) Reset() {
	*x = SetPaymentSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPaymentSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPaymentSecretReq) ProtoMessage() {}

func (x *SetPaymentSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPaymentSecretReq.ProtoReflect.Descriptor instead.
func (*SetPaymentSecretReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *SetPaymentSecretReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SetPaymentSecretReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SetPaymentSecretReq) GetPaymentSecret() string {
	if x != nil {
		return x.PaymentSecret
	}
	return ""
}

func (x *SetPaymentSecretReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *SetPaymentSecretReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetPaymentSecretReq) GetOriginalPaymentSecret() string {
	if x != nil {
		return x.OriginalPaymentSecret
	}
	return ""
}

type SetPaymentSecretResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step       int32       `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"`
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *SetPaymentSecretResp) Reset() {
	*x = SetPaymentSecretResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPaymentSecretResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPaymentSecretResp) ProtoMessage() {}

func (x *SetPaymentSecretResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPaymentSecretResp.ProtoReflect.Descriptor instead.
func (*SetPaymentSecretResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *SetPaymentSecretResp) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *SetPaymentSecretResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 校验用户支付密码
type CheckPaymentSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`               //用户id
	PaymentSecret string `protobuf:"bytes,2,opt,name=paymentSecret,proto3" json:"paymentSecret,omitempty"` //密码
	OperationID   string `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID,omitempty"`     //链路跟踪id
}

func (x *CheckPaymentSecretReq) Reset() {
	*x = CheckPaymentSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPaymentSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPaymentSecretReq) ProtoMessage() {}

func (x *CheckPaymentSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPaymentSecretReq.ProtoReflect.Descriptor instead.
func (*CheckPaymentSecretReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *CheckPaymentSecretReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckPaymentSecretReq) GetPaymentSecret() string {
	if x != nil {
		return x.PaymentSecret
	}
	return ""
}

func (x *CheckPaymentSecretReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type CheckPaymentSecretResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *CheckPaymentSecretResp) Reset() {
	*x = CheckPaymentSecretResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPaymentSecretResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPaymentSecretResp) ProtoMessage() {}

func (x *CheckPaymentSecretResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPaymentSecretResp.ProtoReflect.Descriptor instead.
func (*CheckPaymentSecretResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *CheckPaymentSecretResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 8.用户密码认证  部分操作需要用户密码认证
type UserPaymentSecretAuthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`               //用户id
	PaymentSecret string `protobuf:"bytes,2,opt,name=paymentSecret,proto3" json:"paymentSecret,omitempty"` //密码
}

func (x *UserPaymentSecretAuthReq) Reset() {
	*x = UserPaymentSecretAuthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPaymentSecretAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPaymentSecretAuthReq) ProtoMessage() {}

func (x *UserPaymentSecretAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPaymentSecretAuthReq.ProtoReflect.Descriptor instead.
func (*UserPaymentSecretAuthReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *UserPaymentSecretAuthReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPaymentSecretAuthReq) GetPaymentSecret() string {
	if x != nil {
		return x.PaymentSecret
	}
	return ""
}

type UserPaymentSecretAuthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *UserPaymentSecretAuthResp) Reset() {
	*x = UserPaymentSecretAuthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPaymentSecretAuthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPaymentSecretAuthResp) ProtoMessage() {}

func (x *UserPaymentSecretAuthResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPaymentSecretAuthResp.ProtoReflect.Descriptor instead.
func (*UserPaymentSecretAuthResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *UserPaymentSecretAuthResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 9. 用户钱包提现到银行卡
type DrawAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                   //用户id
	BindCardAgrNo   string `protobuf:"bytes,2,opt,name=bindCardAgrNo,proto3" json:"bindCardAgrNo,omitempty"`     //绑卡协议号
	Amount          int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`                  //提现金额 单位：分
	PaymentPassword string `protobuf:"bytes,4,opt,name=paymentPassword,proto3" json:"paymentPassword,omitempty"` //支付密码
	OperationID     string `protobuf:"bytes,5,opt,name=OperationID,proto3" json:"OperationID,omitempty"`         //链路跟踪id
}

func (x *DrawAccountReq) Reset() {
	*x = DrawAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawAccountReq) ProtoMessage() {}

func (x *DrawAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawAccountReq.ProtoReflect.Descriptor instead.
func (*DrawAccountReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *DrawAccountReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DrawAccountReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *DrawAccountReq) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DrawAccountReq) GetPaymentPassword() string {
	if x != nil {
		return x.PaymentPassword
	}
	return ""
}

func (x *DrawAccountReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type DrawAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo    string      `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo,omitempty"` //订单号
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *DrawAccountResp) Reset() {
	*x = DrawAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawAccountResp) ProtoMessage() {}

func (x *DrawAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawAccountResp.ProtoReflect.Descriptor instead.
func (*DrawAccountResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *DrawAccountResp) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DrawAccountResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 10. 发红包
type SendRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                   //用户id
	PacketType      int32  `protobuf:"varint,2,opt,name=PacketType,proto3" json:"PacketType,omitempty"`          //红包类型(1个人红包、2群红包)
	IsLucky         int32  `protobuf:"varint,3,opt,name=IsLucky,proto3" json:"IsLucky,omitempty"`                //是否为拼手气红包
	IsExclusive     int32  `protobuf:"varint,4,opt,name=IsExclusive,proto3" json:"IsExclusive,omitempty"`        //是否为专属红包(0不是、1是)
	ExclusiveUserID string `protobuf:"bytes,5,opt,name=ExclusiveUserID,proto3" json:"ExclusiveUserID,omitempty"` //专属红包接收者 和isExclusive
	PacketTitle     string `protobuf:"bytes,6,opt,name=PacketTitle,proto3" json:"PacketTitle,omitempty"`         //红包标题
	Amount          int64  `protobuf:"varint,7,opt,name=Amount,proto3" json:"Amount,omitempty"`                  //红包金额 单位：分
	Number          int32  `protobuf:"varint,8,opt,name=Number,proto3" json:"Number,omitempty"`                  //红包个数
	// 通过哪种方式发送红包
	SendType    int32  `protobuf:"varint,9,opt,name=SendType,proto3" json:"SendType,omitempty"`       //发送方式(1钱包余额、2银行卡)
	BankCardID  int64  `protobuf:"varint,10,opt,name=BankCardID,proto3" json:"BankCardID,omitempty"`  //银行卡id
	OperationID string `protobuf:"bytes,11,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
	RecvID      string `protobuf:"bytes,12,opt,name=recvID,proto3" json:"recvID,omitempty"`           //接收者id (如果是群则是群聊红包，如果是用户是用户红包)
	// 发送一个银行卡协议号
	BindCardAgrNo string `protobuf:"bytes,13,opt,name=bindCardAgrNo,proto3" json:"bindCardAgrNo,omitempty"` //绑卡协议号
	Password      string `protobuf:"bytes,14,opt,name=password,proto3" json:"password,omitempty"`           //支付密码
}

func (x *SendRedPacketReq) Reset() {
	*x = SendRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketReq) ProtoMessage() {}

func (x *SendRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketReq.ProtoReflect.Descriptor instead.
func (*SendRedPacketReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{23}
}

func (x *SendRedPacketReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendRedPacketReq) GetPacketType() int32 {
	if x != nil {
		return x.PacketType
	}
	return 0
}

func (x *SendRedPacketReq) GetIsLucky() int32 {
	if x != nil {
		return x.IsLucky
	}
	return 0
}

func (x *SendRedPacketReq) GetIsExclusive() int32 {
	if x != nil {
		return x.IsExclusive
	}
	return 0
}

func (x *SendRedPacketReq) GetExclusiveUserID() string {
	if x != nil {
		return x.ExclusiveUserID
	}
	return ""
}

func (x *SendRedPacketReq) GetPacketTitle() string {
	if x != nil {
		return x.PacketTitle
	}
	return ""
}

func (x *SendRedPacketReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SendRedPacketReq) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SendRedPacketReq) GetSendType() int32 {
	if x != nil {
		return x.SendType
	}
	return 0
}

func (x *SendRedPacketReq) GetBankCardID() int64 {
	if x != nil {
		return x.BankCardID
	}
	return 0
}

func (x *SendRedPacketReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *SendRedPacketReq) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *SendRedPacketReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *SendRedPacketReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SendRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketID string      `protobuf:"bytes,1,opt,name=redPacketID,proto3" json:"redPacketID,omitempty"`
	CommonResp  *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *SendRedPacketResp) Reset() {
	*x = SendRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketResp) ProtoMessage() {}

func (x *SendRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketResp.ProtoReflect.Descriptor instead.
func (*SendRedPacketResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *SendRedPacketResp) GetRedPacketID() string {
	if x != nil {
		return x.RedPacketID
	}
	return ""
}

func (x *SendRedPacketResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 新红包通知结构体
type RedPackageNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                    //用户id
	RedPacketID     int64  `protobuf:"varint,2,opt,name=RedPacketID,proto3" json:"RedPacketID,omitempty"`         //红包id
	SendTime        int64  `protobuf:"varint,3,opt,name=SendTime,proto3" json:"SendTime,omitempty"`               //红包发送时间
	PacketTitle     string `protobuf:"bytes,4,opt,name=PacketTitle,proto3" json:"PacketTitle,omitempty"`          //红包标题
	PacketType      int32  `protobuf:"varint,5,opt,name=PacketType,proto3" json:"PacketType,omitempty"`           //红包类型(1个人红包、2群红包)
	IsExclusive     int32  `protobuf:"varint,6,opt,name=IsExclusive,proto3" json:"IsExclusive,omitempty"`         //是否为专属红包(0不是、1是)
	ExclusiveUserID int64  `protobuf:"varint,7,opt,name=ExclusiveUserID,proto3" json:"ExclusiveUserID,omitempty"` //专属红包接收者 和isExclusive配合使用
}

func (x *RedPackageNotify) Reset() {
	*x = RedPackageNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPackageNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPackageNotify) ProtoMessage() {}

func (x *RedPackageNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPackageNotify.ProtoReflect.Descriptor instead.
func (*RedPackageNotify) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{25}
}

func (x *RedPackageNotify) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RedPackageNotify) GetRedPacketID() int64 {
	if x != nil {
		return x.RedPacketID
	}
	return 0
}

func (x *RedPackageNotify) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *RedPackageNotify) GetPacketTitle() string {
	if x != nil {
		return x.PacketTitle
	}
	return ""
}

func (x *RedPackageNotify) GetPacketType() int32 {
	if x != nil {
		return x.PacketType
	}
	return 0
}

func (x *RedPackageNotify) GetIsExclusive() int32 {
	if x != nil {
		return x.IsExclusive
	}
	return 0
}

func (x *RedPackageNotify) GetExclusiveUserID() int64 {
	if x != nil {
		return x.ExclusiveUserID
	}
	return 0
}

// 红包被领取通知发送红包者 的结构体
type RedPackageClickedNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketID string `protobuf:"bytes,1,opt,name=PacketID,proto3" json:"PacketID,omitempty"` //红包id
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"` //领取者id，同时通知发送者 和接收者，但是两者的消息展示不同
	Remark   string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`     //备注
}

func (x *RedPackageClickedNotify) Reset() {
	*x = RedPackageClickedNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPackageClickedNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPackageClickedNotify) ProtoMessage() {}

func (x *RedPackageClickedNotify) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPackageClickedNotify.ProtoReflect.Descriptor instead.
func (*RedPackageClickedNotify) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{26}
}

func (x *RedPackageClickedNotify) GetPacketID() string {
	if x != nil {
		return x.PacketID
	}
	return ""
}

func (x *RedPackageClickedNotify) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RedPackageClickedNotify) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 11. 抢红包
type ClickRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	RedPacketID string `protobuf:"bytes,2,opt,name=redPacketID,proto3" json:"redPacketID,omitempty"` //红包id
	OperateID   string `protobuf:"bytes,3,opt,name=operateID,proto3" json:"operateID,omitempty"`     //链路跟踪id
}

func (x *ClickRedPacketReq) Reset() {
	*x = ClickRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickRedPacketReq) ProtoMessage() {}

func (x *ClickRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickRedPacketReq.ProtoReflect.Descriptor instead.
func (*ClickRedPacketReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{27}
}

func (x *ClickRedPacketReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClickRedPacketReq) GetRedPacketID() string {
	if x != nil {
		return x.RedPacketID
	}
	return ""
}

func (x *ClickRedPacketReq) GetOperateID() string {
	if x != nil {
		return x.OperateID
	}
	return ""
}

type ClickRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string      `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	RedPacketID string      `protobuf:"bytes,2,opt,name=redPacketID,proto3" json:"redPacketID,omitempty"` //红包id
	Amount      string      `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`           //领取到的红包金额  单位：分
	IsReceive   int32       `protobuf:"varint,4,opt,name=isReceive,proto3" json:"isReceive,omitempty"`    //是否领取成功
	CommonResp  *CommonResp `protobuf:"bytes,5,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *ClickRedPacketResp) Reset() {
	*x = ClickRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickRedPacketResp) ProtoMessage() {}

func (x *ClickRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickRedPacketResp.ProtoReflect.Descriptor instead.
func (*ClickRedPacketResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{28}
}

func (x *ClickRedPacketResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClickRedPacketResp) GetRedPacketID() string {
	if x != nil {
		return x.RedPacketID
	}
	return ""
}

func (x *ClickRedPacketResp) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ClickRedPacketResp) GetIsReceive() int32 {
	if x != nil {
		return x.IsReceive
	}
	return 0
}

func (x *ClickRedPacketResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 12. 获取红包信息
type RedPacketInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	PacketId    string `protobuf:"bytes,2,opt,name=packetId,proto3" json:"packetId,omitempty"`       //红包id
	OperationID string `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
}

func (x *RedPacketInfoReq) Reset() {
	*x = RedPacketInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketInfoReq) ProtoMessage() {}

func (x *RedPacketInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketInfoReq.ProtoReflect.Descriptor instead.
func (*RedPacketInfoReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{29}
}

func (x *RedPacketInfoReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RedPacketInfoReq) GetPacketId() string {
	if x != nil {
		return x.PacketId
	}
	return ""
}

func (x *RedPacketInfoReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type RedPacketInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string           `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                               //用户id
	PacketType      int32            `protobuf:"varint,2,opt,name=packetType,proto3" json:"packetType,omitempty"`                      //红包类型(1个人红包、2群红包)
	IsLucky         int32            `protobuf:"varint,3,opt,name=is_lucky,json=isLucky,proto3" json:"is_lucky,omitempty"`             //是否为拼手气红包
	IsExclusive     int32            `protobuf:"varint,4,opt,name=is_exclusive,json=isExclusive,proto3" json:"is_exclusive,omitempty"` //是否为专属红包(0不是、1是)
	ExclusiveUserID string           `protobuf:"bytes,5,opt,name=exclusiveUserID,proto3" json:"exclusiveUserID,omitempty"`             //专属红包接收者 和isExclusive配合使用
	PacketTitle     string           `protobuf:"bytes,6,opt,name=packet_title,json=packetTitle,proto3" json:"packet_title,omitempty"`  //红包标题
	Amount          int64            `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`                              //红包金额
	Number          int32            `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`                              //红包个数
	ExpireTime      int64            `protobuf:"varint,9,opt,name=expireTime,proto3" json:"expireTime,omitempty"`                      //红包过期时间
	Remain          int64            `protobuf:"varint,10,opt,name=remain,proto3" json:"remain,omitempty"`                             //剩余红包个数
	Nickname        string           `protobuf:"bytes,11,opt,name=nickname,proto3" json:"nickname,omitempty"`                          //昵称
	FaceUrl         string           `protobuf:"bytes,12,opt,name=faceUrl,proto3" json:"faceUrl,omitempty"`                            //头像
	ReceiveDetail   []*ReceiveDetail `protobuf:"bytes,13,rep,name=receiveDetail,proto3" json:"receiveDetail,omitempty"`                //当前红包领取列表
}

func (x *RedPacketInfoResp) Reset() {
	*x = RedPacketInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketInfoResp) ProtoMessage() {}

func (x *RedPacketInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketInfoResp.ProtoReflect.Descriptor instead.
func (*RedPacketInfoResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{30}
}

func (x *RedPacketInfoResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RedPacketInfoResp) GetPacketType() int32 {
	if x != nil {
		return x.PacketType
	}
	return 0
}

func (x *RedPacketInfoResp) GetIsLucky() int32 {
	if x != nil {
		return x.IsLucky
	}
	return 0
}

func (x *RedPacketInfoResp) GetIsExclusive() int32 {
	if x != nil {
		return x.IsExclusive
	}
	return 0
}

func (x *RedPacketInfoResp) GetExclusiveUserID() string {
	if x != nil {
		return x.ExclusiveUserID
	}
	return ""
}

func (x *RedPacketInfoResp) GetPacketTitle() string {
	if x != nil {
		return x.PacketTitle
	}
	return ""
}

func (x *RedPacketInfoResp) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RedPacketInfoResp) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *RedPacketInfoResp) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *RedPacketInfoResp) GetRemain() int64 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *RedPacketInfoResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RedPacketInfoResp) GetFaceUrl() string {
	if x != nil {
		return x.FaceUrl
	}
	return ""
}

func (x *RedPacketInfoResp) GetReceiveDetail() []*ReceiveDetail {
	if x != nil {
		return x.ReceiveDetail
	}
	return nil
}

type ReceiveDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`          //金额
	Nickname    string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`       //昵称
	FaceUrl     string `protobuf:"bytes,4,opt,name=faceUrl,proto3" json:"faceUrl,omitempty"`         //头像
	ReceiveTime string `protobuf:"bytes,5,opt,name=receiveTime,proto3" json:"receiveTime,omitempty"` //领取时间
}

func (x *ReceiveDetail) Reset() {
	*x = ReceiveDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveDetail) ProtoMessage() {}

func (x *ReceiveDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveDetail.ProtoReflect.Descriptor instead.
func (*ReceiveDetail) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{31}
}

func (x *ReceiveDetail) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReceiveDetail) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReceiveDetail) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ReceiveDetail) GetFaceUrl() string {
	if x != nil {
		return x.FaceUrl
	}
	return ""
}

func (x *ReceiveDetail) GetReceiveTime() string {
	if x != nil {
		return x.ReceiveTime
	}
	return ""
}

// 13. 红包领取明细
type RedPacketReceiveDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	StartTime   string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`     //开始时间
	EndTime     string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`         //结束时间
	OperationID string `protobuf:"bytes,4,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
}

func (x *RedPacketReceiveDetailReq) Reset() {
	*x = RedPacketReceiveDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketReceiveDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketReceiveDetailReq) ProtoMessage() {}

func (x *RedPacketReceiveDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketReceiveDetailReq.ProtoReflect.Descriptor instead.
func (*RedPacketReceiveDetailReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{32}
}

func (x *RedPacketReceiveDetailReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RedPacketReceiveDetailReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *RedPacketReceiveDetailReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *RedPacketReceiveDetailReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type RedPacketReceiveDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketReceiveDetail []*RedPacketReceiveDetail `protobuf:"bytes,1,rep,name=redPacketReceiveDetail,proto3" json:"redPacketReceiveDetail,omitempty"`
}

func (x *RedPacketReceiveDetailResp) Reset() {
	*x = RedPacketReceiveDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketReceiveDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketReceiveDetailResp) ProtoMessage() {}

func (x *RedPacketReceiveDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketReceiveDetailResp.ProtoReflect.Descriptor instead.
func (*RedPacketReceiveDetailResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{33}
}

func (x *RedPacketReceiveDetailResp) GetRedPacketReceiveDetail() []*RedPacketReceiveDetail {
	if x != nil {
		return x.RedPacketReceiveDetail
	}
	return nil
}

type RedPacketReceiveDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketId    string `protobuf:"bytes,1,opt,name=packetId,proto3" json:"packetId,omitempty"`       //红包id
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`          //金额(分)
	PacketTitle string `protobuf:"bytes,3,opt,name=packetTitle,proto3" json:"packetTitle,omitempty"` //红包标题
	ReceiveTime string `protobuf:"bytes,4,opt,name=receiveTime,proto3" json:"receiveTime,omitempty"` //领取时间
	PacketType  int32  `protobuf:"varint,5,opt,name=packetType,proto3" json:"packetType,omitempty"`  //红包类型(1个人红包、2群红包)
	IsLucky     string `protobuf:"bytes,6,opt,name=isLucky,proto3" json:"isLucky,omitempty"`         //是否为拼手气红包
}

func (x *RedPacketReceiveDetail) Reset() {
	*x = RedPacketReceiveDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketReceiveDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketReceiveDetail) ProtoMessage() {}

func (x *RedPacketReceiveDetail) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketReceiveDetail.ProtoReflect.Descriptor instead.
func (*RedPacketReceiveDetail) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{34}
}

func (x *RedPacketReceiveDetail) GetPacketId() string {
	if x != nil {
		return x.PacketId
	}
	return ""
}

func (x *RedPacketReceiveDetail) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RedPacketReceiveDetail) GetPacketTitle() string {
	if x != nil {
		return x.PacketTitle
	}
	return ""
}

func (x *RedPacketReceiveDetail) GetReceiveTime() string {
	if x != nil {
		return x.ReceiveTime
	}
	return ""
}

func (x *RedPacketReceiveDetail) GetPacketType() int32 {
	if x != nil {
		return x.PacketType
	}
	return 0
}

func (x *RedPacketReceiveDetail) GetIsLucky() string {
	if x != nil {
		return x.IsLucky
	}
	return ""
}

type ListRedPacketRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户id
	Date   string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ListRedPacketRecordReq) Reset() {
	*x = ListRedPacketRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRedPacketRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRedPacketRecordReq) ProtoMessage() {}

func (x *ListRedPacketRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRedPacketRecordReq.ProtoReflect.Descriptor instead.
func (*ListRedPacketRecordReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{35}
}

func (x *ListRedPacketRecordReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListRedPacketRecordReq) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ListRedPacketRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string      `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                 //领取人id
	Nickname       string      `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`             //领取人名称
	Avater         string      `protobuf:"bytes,3,opt,name=avater,proto3" json:"avater,omitempty"`                 //领取人头像
	RedPacketID    uint32      `protobuf:"varint,4,opt,name=redPacketID,proto3" json:"redPacketID,omitempty"`      //红包id
	RedPacketTitle string      `protobuf:"bytes,5,opt,name=redPacketTitle,proto3" json:"redPacketTitle,omitempty"` //红包标题
	Amount         float32     `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`               //红包金额
	CommonResp     *CommonResp `protobuf:"bytes,7,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *ListRedPacketRecordResp) Reset() {
	*x = ListRedPacketRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRedPacketRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRedPacketRecordResp) ProtoMessage() {}

func (x *ListRedPacketRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRedPacketRecordResp.ProtoReflect.Descriptor instead.
func (*ListRedPacketRecordResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{36}
}

func (x *ListRedPacketRecordResp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListRedPacketRecordResp) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ListRedPacketRecordResp) GetAvater() string {
	if x != nil {
		return x.Avater
	}
	return ""
}

func (x *ListRedPacketRecordResp) GetRedPacketID() uint32 {
	if x != nil {
		return x.RedPacketID
	}
	return 0
}

func (x *ListRedPacketRecordResp) GetRedPacketTitle() string {
	if x != nil {
		return x.RedPacketTitle
	}
	return ""
}

func (x *ListRedPacketRecordResp) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ListRedPacketRecordResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 15. 确认发送红包的code
type ConfirmSendRedPacketCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户id
	RedPacketID string `protobuf:"bytes,2,opt,name=redPacketID,proto3" json:"redPacketID,omitempty"`
	Code        string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ConfirmSendRedPacketCodeReq) Reset() {
	*x = ConfirmSendRedPacketCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmSendRedPacketCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmSendRedPacketCodeReq) ProtoMessage() {}

func (x *ConfirmSendRedPacketCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmSendRedPacketCodeReq.ProtoReflect.Descriptor instead.
func (*ConfirmSendRedPacketCodeReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{37}
}

func (x *ConfirmSendRedPacketCodeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConfirmSendRedPacketCodeReq) GetRedPacketID() string {
	if x != nil {
		return x.RedPacketID
	}
	return ""
}

func (x *ConfirmSendRedPacketCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ConfirmSendRedPacketCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *ConfirmSendRedPacketCodeResp) Reset() {
	*x = ConfirmSendRedPacketCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmSendRedPacketCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmSendRedPacketCodeResp) ProtoMessage() {}

func (x *ConfirmSendRedPacketCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmSendRedPacketCodeResp.ProtoReflect.Descriptor instead.
func (*ConfirmSendRedPacketCodeResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{38}
}

func (x *ConfirmSendRedPacketCodeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// ==============================================回调 ===================
// 16. 用户从银行卡充值到红包、充值到主账户都需要进行回调
type ChargeNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerOrderId     string `protobuf:"bytes,1,opt,name=merOrderId,proto3" json:"merOrderId,omitempty"`
	ResultCode     string `protobuf:"bytes,2,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	ErrorCode      string `protobuf:"bytes,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg       string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	NcountOrderId  string `protobuf:"bytes,5,opt,name=ncountOrderId,proto3" json:"ncountOrderId,omitempty"`
	TranAmount     string `protobuf:"bytes,6,opt,name=tranAmount,proto3" json:"tranAmount,omitempty"`
	SubmitTime     string `protobuf:"bytes,7,opt,name=submitTime,proto3" json:"submitTime,omitempty"`
	TranFinishTime string `protobuf:"bytes,8,opt,name=tranFinishTime,proto3" json:"tranFinishTime,omitempty"`
	FeeAmount      string `protobuf:"bytes,9,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
}

func (x *ChargeNotifyReq) Reset() {
	*x = ChargeNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeNotifyReq) ProtoMessage() {}

func (x *ChargeNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeNotifyReq.ProtoReflect.Descriptor instead.
func (*ChargeNotifyReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{39}
}

func (x *ChargeNotifyReq) GetMerOrderId() string {
	if x != nil {
		return x.MerOrderId
	}
	return ""
}

func (x *ChargeNotifyReq) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *ChargeNotifyReq) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ChargeNotifyReq) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *ChargeNotifyReq) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

func (x *ChargeNotifyReq) GetTranAmount() string {
	if x != nil {
		return x.TranAmount
	}
	return ""
}

func (x *ChargeNotifyReq) GetSubmitTime() string {
	if x != nil {
		return x.SubmitTime
	}
	return ""
}

func (x *ChargeNotifyReq) GetTranFinishTime() string {
	if x != nil {
		return x.TranFinishTime
	}
	return ""
}

func (x *ChargeNotifyReq) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

type ChargeNotifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *ChargeNotifyResp) Reset() {
	*x = ChargeNotifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeNotifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeNotifyResp) ProtoMessage() {}

func (x *ChargeNotifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeNotifyResp.ProtoReflect.Descriptor instead.
func (*ChargeNotifyResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{40}
}

func (x *ChargeNotifyResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 17. 提现的回调接口： 提供给第三方
type DrawNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerOrderId     string `protobuf:"bytes,1,opt,name=merOrderId,proto3" json:"merOrderId,omitempty"`
	ResultCode     string `protobuf:"bytes,2,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
	ErrorCode      string `protobuf:"bytes,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg       string `protobuf:"bytes,4,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	NcountOrderId  string `protobuf:"bytes,5,opt,name=ncountOrderId,proto3" json:"ncountOrderId,omitempty"`
	TranFinishDate string `protobuf:"bytes,6,opt,name=tranFinishDate,proto3" json:"tranFinishDate,omitempty"`
	ServiceAmount  string `protobuf:"bytes,7,opt,name=serviceAmount,proto3" json:"serviceAmount,omitempty"`
	PayAcctAmount  string `protobuf:"bytes,8,opt,name=payAcctAmount,proto3" json:"payAcctAmount,omitempty"`
}

func (x *DrawNotifyReq) Reset() {
	*x = DrawNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNotifyReq) ProtoMessage() {}

func (x *DrawNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNotifyReq.ProtoReflect.Descriptor instead.
func (*DrawNotifyReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{41}
}

func (x *DrawNotifyReq) GetMerOrderId() string {
	if x != nil {
		return x.MerOrderId
	}
	return ""
}

func (x *DrawNotifyReq) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *DrawNotifyReq) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *DrawNotifyReq) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *DrawNotifyReq) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

func (x *DrawNotifyReq) GetTranFinishDate() string {
	if x != nil {
		return x.TranFinishDate
	}
	return ""
}

func (x *DrawNotifyReq) GetServiceAmount() string {
	if x != nil {
		return x.ServiceAmount
	}
	return ""
}

func (x *DrawNotifyReq) GetPayAcctAmount() string {
	if x != nil {
		return x.PayAcctAmount
	}
	return ""
}

type DrawNotifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *DrawNotifyResp) Reset() {
	*x = DrawNotifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawNotifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNotifyResp) ProtoMessage() {}

func (x *DrawNotifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNotifyResp.ProtoReflect.Descriptor instead.
func (*DrawNotifyResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{42}
}

func (x *DrawNotifyResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 身份证实名认证
type IdCardRealNameAuthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                     //用户id
	Mobile      string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`                     //手机号码
	IdCard      string `protobuf:"bytes,3,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`       //身份证
	RealName    string `protobuf:"bytes,4,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"` //真实姓名
	OperationID string `protobuf:"bytes,5,opt,name=operationID,proto3" json:"operationID,omitempty"`           //链路跟踪id
}

func (x *IdCardRealNameAuthReq) Reset() {
	*x = IdCardRealNameAuthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdCardRealNameAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdCardRealNameAuthReq) ProtoMessage() {}

func (x *IdCardRealNameAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdCardRealNameAuthReq.ProtoReflect.Descriptor instead.
func (*IdCardRealNameAuthReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{43}
}

func (x *IdCardRealNameAuthReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IdCardRealNameAuthReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *IdCardRealNameAuthReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *IdCardRealNameAuthReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *IdCardRealNameAuthReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type IdCardRealNameAuthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step       uint32      `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"` //步骤
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *IdCardRealNameAuthResp) Reset() {
	*x = IdCardRealNameAuthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdCardRealNameAuthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdCardRealNameAuthResp) ProtoMessage() {}

func (x *IdCardRealNameAuthResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdCardRealNameAuthResp.ProtoReflect.Descriptor instead.
func (*IdCardRealNameAuthResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{44}
}

func (x *IdCardRealNameAuthResp) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *IdCardRealNameAuthResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type AuthPaymentSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                                    //用户id
	PaymentSecret string `protobuf:"bytes,2,opt,name=payment_secret,json=paymentSecret,proto3" json:"payment_secret,omitempty"` //支付密码
}

func (x *AuthPaymentSecretReq) Reset() {
	*x = AuthPaymentSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPaymentSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPaymentSecretReq) ProtoMessage() {}

func (x *AuthPaymentSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPaymentSecretReq.ProtoReflect.Descriptor instead.
func (*AuthPaymentSecretReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{45}
}

func (x *AuthPaymentSecretReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuthPaymentSecretReq) GetPaymentSecret() string {
	if x != nil {
		return x.PaymentSecret
	}
	return ""
}

type AuthPaymentSecretResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step       uint32      `protobuf:"varint,1,opt,name=step,proto3" json:"step,omitempty"` //步骤
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *AuthPaymentSecretResp) Reset() {
	*x = AuthPaymentSecretResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPaymentSecretResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPaymentSecretResp) ProtoMessage() {}

func (x *AuthPaymentSecretResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPaymentSecretResp.ProtoReflect.Descriptor instead.
func (*AuthPaymentSecretResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{46}
}

func (x *AuthPaymentSecretResp) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *AuthPaymentSecretResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

// 用户的充值接口
type UserRechargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`               //用户id
	BindCardAgrNo string `protobuf:"bytes,2,opt,name=bindCardAgrNo,proto3" json:"bindCardAgrNo,omitempty"` //绑卡协议号
	Amount        int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`              //充值金额 单位：分
	AccountType   int32  `protobuf:"varint,4,opt,name=accountType,proto3" json:"accountType,omitempty"`    //充值账户类型(1主账户,2红包账户)
	OperationID   string `protobuf:"bytes,5,opt,name=OperationID,proto3" json:"OperationID,omitempty"`     //链路跟踪id
}

func (x *UserRechargeReq) Reset() {
	*x = UserRechargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeReq) ProtoMessage() {}

func (x *UserRechargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeReq.ProtoReflect.Descriptor instead.
func (*UserRechargeReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{47}
}

func (x *UserRechargeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRechargeReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *UserRechargeReq) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserRechargeReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *UserRechargeReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type UserRechargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo    string      `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo,omitempty"` //订单号
	CommonResp *CommonResp `protobuf:"bytes,2,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *UserRechargeResp) Reset() {
	*x = UserRechargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRechargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRechargeResp) ProtoMessage() {}

func (x *UserRechargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRechargeResp.ProtoReflect.Descriptor instead.
func (*UserRechargeResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{48}
}

func (x *UserRechargeResp) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *UserRechargeResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type ForbidGroupRedPacketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	GroupId     string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`         //群id
	OperationID string `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
	Forbid      int32  `protobuf:"varint,4,opt,name=forbid,proto3" json:"forbid,omitempty"`          //是否禁止群红包(1禁止,0不禁止)
}

func (x *ForbidGroupRedPacketReq) Reset() {
	*x = ForbidGroupRedPacketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidGroupRedPacketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidGroupRedPacketReq) ProtoMessage() {}

func (x *ForbidGroupRedPacketReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidGroupRedPacketReq.ProtoReflect.Descriptor instead.
func (*ForbidGroupRedPacketReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{49}
}

func (x *ForbidGroupRedPacketReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ForbidGroupRedPacketReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ForbidGroupRedPacketReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ForbidGroupRedPacketReq) GetForbid() int32 {
	if x != nil {
		return x.Forbid
	}
	return 0
}

type ForbidGroupRedPacketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *ForbidGroupRedPacketResp) Reset() {
	*x = ForbidGroupRedPacketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForbidGroupRedPacketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForbidGroupRedPacketResp) ProtoMessage() {}

func (x *ForbidGroupRedPacketResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForbidGroupRedPacketResp.ProtoReflect.Descriptor instead.
func (*ForbidGroupRedPacketResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{50}
}

func (x *ForbidGroupRedPacketResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type CloudWalletRecordDelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`           //用户id
	RecordId    int32  `protobuf:"varint,2,opt,name=recordId,proto3" json:"recordId,omitempty"`      //记录id
	OperationID string `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID,omitempty"` //链路跟踪id
	DelType     int32  `protobuf:"varint,4,opt,name=delType,proto3" json:"delType,omitempty"`        //删除类型(0单条、1全部)
}

func (x *CloudWalletRecordDelReq) Reset() {
	*x = CloudWalletRecordDelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudWalletRecordDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudWalletRecordDelReq) ProtoMessage() {}

func (x *CloudWalletRecordDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudWalletRecordDelReq.ProtoReflect.Descriptor instead.
func (*CloudWalletRecordDelReq) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{51}
}

func (x *CloudWalletRecordDelReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CloudWalletRecordDelReq) GetRecordId() int32 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *CloudWalletRecordDelReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CloudWalletRecordDelReq) GetDelType() int32 {
	if x != nil {
		return x.DelType
	}
	return 0
}

type CloudWalletRecordDelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResp `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
}

func (x *CloudWalletRecordDelResp) Reset() {
	*x = CloudWalletRecordDelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudWalletRecordDelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudWalletRecordDelResp) ProtoMessage() {}

func (x *CloudWalletRecordDelResp) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_wallet_cloud_wallet_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudWalletRecordDelResp.ProtoReflect.Descriptor instead.
func (*CloudWalletRecordDelResp) Descriptor() ([]byte, []int) {
	return file_cloud_wallet_cloud_wallet_proto_rawDescGZIP(), []int{52}
}

func (x *CloudWalletRecordDelResp) GetCommonResp() *CommonResp {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

var File_cloud_wallet_cloud_wallet_proto protoreflect.FileDescriptor

var file_cloud_wallet_cloud_wallet_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22,
	0x60, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x50, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0xcc, 0x02, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x67, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x6b, 0x0a,
	0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61,
	0x72, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x76, 0x76, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x76, 0x76, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x70, 0x0a, 0x14, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6d,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xce, 0x01, 0x0a, 0x1a,
	0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x1b,
	0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x18, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x55, 0x0a, 0x19, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd3, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x64,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x77, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x0a,
	0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x58, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x19, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67,
	0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x77, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xba,
	0x03, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6f, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xf6, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x49, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0x6b, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xbe, 0x01,
	0x0a, 0x12, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x68,
	0x0a, 0x10, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xb7, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x75, 0x63,
	0x6b, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x1a,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x16, 0x72, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x16, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x22, 0x44, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x17,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x6b, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x1c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xb7, 0x02, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4c, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa3,
	0x02, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x9f, 0x01, 0x0a, 0x15, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x66, 0x0a, 0x16, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x55, 0x0a, 0x14, 0x61, 0x75,
	0x74, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x65, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x38,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x67, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x85,
	0x01, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x89, 0x01, 0x0a,
	0x17, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2a, 0x81,
	0x02, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x8f, 0x4e,
	0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xb8, 0x45, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x10, 0xe8, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0xe9, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x73,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0xea, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x10, 0xeb, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x10, 0xec, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x10, 0xed, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10,
	0xd0, 0x0f, 0x32, 0x80, 0x0e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x49, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x49, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59,
	0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x6b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x17, 0x42, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x29,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x15, 0x55, 0x6e, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x63, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x50, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x6b, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65,
	0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_wallet_cloud_wallet_proto_rawDescOnce sync.Once
	file_cloud_wallet_cloud_wallet_proto_rawDescData = file_cloud_wallet_cloud_wallet_proto_rawDesc
)

func file_cloud_wallet_cloud_wallet_proto_rawDescGZIP() []byte {
	file_cloud_wallet_cloud_wallet_proto_rawDescOnce.Do(func() {
		file_cloud_wallet_cloud_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_wallet_cloud_wallet_proto_rawDescData)
	})
	return file_cloud_wallet_cloud_wallet_proto_rawDescData
}

var file_cloud_wallet_cloud_wallet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_wallet_cloud_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_cloud_wallet_cloud_wallet_proto_goTypes = []interface{}{
	(CloudWalletErrCode)(0),              // 0: cloud_wallet.CloudWalletErrCode
	(*CommonResp)(nil),                   // 1: cloud_wallet.CommonResp
	(*UserNcountAccountReq)(nil),         // 2: cloud_wallet.UserNcountAccountReq
	(*UserNcountAccountResp)(nil),        // 3: cloud_wallet.UserNcountAccountResp
	(*BindCardsList)(nil),                // 4: cloud_wallet.BindCardsList
	(*CloudWalletRecordListReq)(nil),     // 5: cloud_wallet.CloudWalletRecordListReq
	(*CloudWalletRecordListResp)(nil),    // 6: cloud_wallet.CloudWalletRecordListResp
	(*RecordList)(nil),                   // 7: cloud_wallet.RecordList
	(*BindUserBankcardReq)(nil),          // 8: cloud_wallet.BindUserBankcardReq
	(*BindUserBankcardResp)(nil),         // 9: cloud_wallet.BindUserBankcardResp
	(*UserRechargeConfirmReq)(nil),       // 10: cloud_wallet.UserRechargeConfirmReq
	(*UserRechargeConfirmResp)(nil),      // 11: cloud_wallet.UserRechargeConfirmResp
	(*BindUserBankcardConfirmReq)(nil),   // 12: cloud_wallet.BindUserBankcardConfirmReq
	(*BindUserBankcardConfirmResp)(nil),  // 13: cloud_wallet.BindUserBankcardConfirmResp
	(*UnBindingUserBankcardReq)(nil),     // 14: cloud_wallet.UnBindingUserBankcardReq
	(*UnBindingUserBankcardResp)(nil),    // 15: cloud_wallet.UnBindingUserBankcardResp
	(*SetPaymentSecretReq)(nil),          // 16: cloud_wallet.SetPaymentSecretReq
	(*SetPaymentSecretResp)(nil),         // 17: cloud_wallet.SetPaymentSecretResp
	(*CheckPaymentSecretReq)(nil),        // 18: cloud_wallet.CheckPaymentSecretReq
	(*CheckPaymentSecretResp)(nil),       // 19: cloud_wallet.CheckPaymentSecretResp
	(*UserPaymentSecretAuthReq)(nil),     // 20: cloud_wallet.userPaymentSecretAuthReq
	(*UserPaymentSecretAuthResp)(nil),    // 21: cloud_wallet.userPaymentSecretAuthResp
	(*DrawAccountReq)(nil),               // 22: cloud_wallet.drawAccountReq
	(*DrawAccountResp)(nil),              // 23: cloud_wallet.drawAccountResp
	(*SendRedPacketReq)(nil),             // 24: cloud_wallet.SendRedPacketReq
	(*SendRedPacketResp)(nil),            // 25: cloud_wallet.SendRedPacketResp
	(*RedPackageNotify)(nil),             // 26: cloud_wallet.RedPackageNotify
	(*RedPackageClickedNotify)(nil),      // 27: cloud_wallet.RedPackageClickedNotify
	(*ClickRedPacketReq)(nil),            // 28: cloud_wallet.ClickRedPacketReq
	(*ClickRedPacketResp)(nil),           // 29: cloud_wallet.ClickRedPacketResp
	(*RedPacketInfoReq)(nil),             // 30: cloud_wallet.RedPacketInfoReq
	(*RedPacketInfoResp)(nil),            // 31: cloud_wallet.RedPacketInfoResp
	(*ReceiveDetail)(nil),                // 32: cloud_wallet.ReceiveDetail
	(*RedPacketReceiveDetailReq)(nil),    // 33: cloud_wallet.RedPacketReceiveDetailReq
	(*RedPacketReceiveDetailResp)(nil),   // 34: cloud_wallet.RedPacketReceiveDetailResp
	(*RedPacketReceiveDetail)(nil),       // 35: cloud_wallet.RedPacketReceiveDetail
	(*ListRedPacketRecordReq)(nil),       // 36: cloud_wallet.listRedPacketRecordReq
	(*ListRedPacketRecordResp)(nil),      // 37: cloud_wallet.listRedPacketRecordResp
	(*ConfirmSendRedPacketCodeReq)(nil),  // 38: cloud_wallet.confirmSendRedPacketCodeReq
	(*ConfirmSendRedPacketCodeResp)(nil), // 39: cloud_wallet.confirmSendRedPacketCodeResp
	(*ChargeNotifyReq)(nil),              // 40: cloud_wallet.chargeNotifyReq
	(*ChargeNotifyResp)(nil),             // 41: cloud_wallet.chargeNotifyResp
	(*DrawNotifyReq)(nil),                // 42: cloud_wallet.drawNotifyReq
	(*DrawNotifyResp)(nil),               // 43: cloud_wallet.drawNotifyResp
	(*IdCardRealNameAuthReq)(nil),        // 44: cloud_wallet.IdCardRealNameAuthReq
	(*IdCardRealNameAuthResp)(nil),       // 45: cloud_wallet.IdCardRealNameAuthResp
	(*AuthPaymentSecretReq)(nil),         // 46: cloud_wallet.authPaymentSecretReq
	(*AuthPaymentSecretResp)(nil),        // 47: cloud_wallet.authPaymentSecretResp
	(*UserRechargeReq)(nil),              // 48: cloud_wallet.UserRechargeReq
	(*UserRechargeResp)(nil),             // 49: cloud_wallet.UserRechargeResp
	(*ForbidGroupRedPacketReq)(nil),      // 50: cloud_wallet.ForbidGroupRedPacketReq
	(*ForbidGroupRedPacketResp)(nil),     // 51: cloud_wallet.ForbidGroupRedPacketResp
	(*CloudWalletRecordDelReq)(nil),      // 52: cloud_wallet.CloudWalletRecordDelReq
	(*CloudWalletRecordDelResp)(nil),     // 53: cloud_wallet.CloudWalletRecordDelResp
}
var file_cloud_wallet_cloud_wallet_proto_depIdxs = []int32{
	0,  // 0: cloud_wallet.CommonResp.errCode:type_name -> cloud_wallet.CloudWalletErrCode
	4,  // 1: cloud_wallet.UserNcountAccountResp.bindCardsList:type_name -> cloud_wallet.BindCardsList
	1,  // 2: cloud_wallet.UserNcountAccountResp.commonResp:type_name -> cloud_wallet.CommonResp
	7,  // 3: cloud_wallet.CloudWalletRecordListResp.recordList:type_name -> cloud_wallet.RecordList
	1,  // 4: cloud_wallet.BindUserBankcardResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 5: cloud_wallet.UserRechargeConfirmResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 6: cloud_wallet.BindUserBankcardConfirmResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 7: cloud_wallet.UnBindingUserBankcardResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 8: cloud_wallet.SetPaymentSecretResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 9: cloud_wallet.CheckPaymentSecretResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 10: cloud_wallet.userPaymentSecretAuthResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 11: cloud_wallet.drawAccountResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 12: cloud_wallet.SendRedPacketResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 13: cloud_wallet.ClickRedPacketResp.commonResp:type_name -> cloud_wallet.CommonResp
	32, // 14: cloud_wallet.RedPacketInfoResp.receiveDetail:type_name -> cloud_wallet.ReceiveDetail
	35, // 15: cloud_wallet.RedPacketReceiveDetailResp.redPacketReceiveDetail:type_name -> cloud_wallet.RedPacketReceiveDetail
	1,  // 16: cloud_wallet.listRedPacketRecordResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 17: cloud_wallet.confirmSendRedPacketCodeResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 18: cloud_wallet.chargeNotifyResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 19: cloud_wallet.drawNotifyResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 20: cloud_wallet.IdCardRealNameAuthResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 21: cloud_wallet.authPaymentSecretResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 22: cloud_wallet.UserRechargeResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 23: cloud_wallet.ForbidGroupRedPacketResp.commonResp:type_name -> cloud_wallet.CommonResp
	1,  // 24: cloud_wallet.CloudWalletRecordDelResp.commonResp:type_name -> cloud_wallet.CommonResp
	2,  // 25: cloud_wallet.CloudWalletService.UserNcountAccount:input_type -> cloud_wallet.UserNcountAccountReq
	44, // 26: cloud_wallet.CloudWalletService.IdCardRealNameAuth:input_type -> cloud_wallet.IdCardRealNameAuthReq
	16, // 27: cloud_wallet.CloudWalletService.SetPaymentSecret:input_type -> cloud_wallet.SetPaymentSecretReq
	18, // 28: cloud_wallet.CloudWalletService.CheckPaymentSecret:input_type -> cloud_wallet.CheckPaymentSecretReq
	5,  // 29: cloud_wallet.CloudWalletService.CloudWalletRecordList:input_type -> cloud_wallet.CloudWalletRecordListReq
	8,  // 30: cloud_wallet.CloudWalletService.BindUserBankcard:input_type -> cloud_wallet.BindUserBankcardReq
	12, // 31: cloud_wallet.CloudWalletService.BindUserBankcardConfirm:input_type -> cloud_wallet.BindUserBankcardConfirmReq
	14, // 32: cloud_wallet.CloudWalletService.UnBindingUserBankcard:input_type -> cloud_wallet.UnBindingUserBankcardReq
	48, // 33: cloud_wallet.CloudWalletService.UserRecharge:input_type -> cloud_wallet.UserRechargeReq
	10, // 34: cloud_wallet.CloudWalletService.UserRechargeConfirm:input_type -> cloud_wallet.UserRechargeConfirmReq
	22, // 35: cloud_wallet.CloudWalletService.UserWithdrawal:input_type -> cloud_wallet.drawAccountReq
	40, // 36: cloud_wallet.CloudWalletService.ChargeNotify:input_type -> cloud_wallet.chargeNotifyReq
	42, // 37: cloud_wallet.CloudWalletService.WithDrawNotify:input_type -> cloud_wallet.drawNotifyReq
	24, // 38: cloud_wallet.CloudWalletService.SendRedPacket:input_type -> cloud_wallet.SendRedPacketReq
	28, // 39: cloud_wallet.CloudWalletService.ClickRedPacket:input_type -> cloud_wallet.ClickRedPacketReq
	50, // 40: cloud_wallet.CloudWalletService.ForbidGroupRedPacket:input_type -> cloud_wallet.ForbidGroupRedPacketReq
	33, // 41: cloud_wallet.CloudWalletService.RedPacketReceiveDetail:input_type -> cloud_wallet.RedPacketReceiveDetailReq
	30, // 42: cloud_wallet.CloudWalletService.RedPacketInfo:input_type -> cloud_wallet.RedPacketInfoReq
	52, // 43: cloud_wallet.CloudWalletService.CloudWalletRecordDel:input_type -> cloud_wallet.CloudWalletRecordDelReq
	3,  // 44: cloud_wallet.CloudWalletService.UserNcountAccount:output_type -> cloud_wallet.UserNcountAccountResp
	45, // 45: cloud_wallet.CloudWalletService.IdCardRealNameAuth:output_type -> cloud_wallet.IdCardRealNameAuthResp
	17, // 46: cloud_wallet.CloudWalletService.SetPaymentSecret:output_type -> cloud_wallet.SetPaymentSecretResp
	19, // 47: cloud_wallet.CloudWalletService.CheckPaymentSecret:output_type -> cloud_wallet.CheckPaymentSecretResp
	6,  // 48: cloud_wallet.CloudWalletService.CloudWalletRecordList:output_type -> cloud_wallet.CloudWalletRecordListResp
	9,  // 49: cloud_wallet.CloudWalletService.BindUserBankcard:output_type -> cloud_wallet.BindUserBankcardResp
	13, // 50: cloud_wallet.CloudWalletService.BindUserBankcardConfirm:output_type -> cloud_wallet.BindUserBankcardConfirmResp
	15, // 51: cloud_wallet.CloudWalletService.UnBindingUserBankcard:output_type -> cloud_wallet.UnBindingUserBankcardResp
	49, // 52: cloud_wallet.CloudWalletService.UserRecharge:output_type -> cloud_wallet.UserRechargeResp
	11, // 53: cloud_wallet.CloudWalletService.UserRechargeConfirm:output_type -> cloud_wallet.UserRechargeConfirmResp
	23, // 54: cloud_wallet.CloudWalletService.UserWithdrawal:output_type -> cloud_wallet.drawAccountResp
	41, // 55: cloud_wallet.CloudWalletService.ChargeNotify:output_type -> cloud_wallet.chargeNotifyResp
	43, // 56: cloud_wallet.CloudWalletService.WithDrawNotify:output_type -> cloud_wallet.drawNotifyResp
	25, // 57: cloud_wallet.CloudWalletService.SendRedPacket:output_type -> cloud_wallet.SendRedPacketResp
	29, // 58: cloud_wallet.CloudWalletService.ClickRedPacket:output_type -> cloud_wallet.ClickRedPacketResp
	51, // 59: cloud_wallet.CloudWalletService.ForbidGroupRedPacket:output_type -> cloud_wallet.ForbidGroupRedPacketResp
	34, // 60: cloud_wallet.CloudWalletService.RedPacketReceiveDetail:output_type -> cloud_wallet.RedPacketReceiveDetailResp
	31, // 61: cloud_wallet.CloudWalletService.RedPacketInfo:output_type -> cloud_wallet.RedPacketInfoResp
	53, // 62: cloud_wallet.CloudWalletService.CloudWalletRecordDel:output_type -> cloud_wallet.CloudWalletRecordDelResp
	44, // [44:63] is the sub-list for method output_type
	25, // [25:44] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_cloud_wallet_cloud_wallet_proto_init() }
func file_cloud_wallet_cloud_wallet_proto_init() {
	if File_cloud_wallet_cloud_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_wallet_cloud_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNcountAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNcountAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindCardsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudWalletRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudWalletRecordListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserBankcardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserBankcardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserBankcardConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserBankcardConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBindingUserBankcardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBindingUserBankcardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPaymentSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPaymentSecretResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPaymentSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPaymentSecretResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPaymentSecretAuthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPaymentSecretAuthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPackageNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPackageClickedNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketReceiveDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketReceiveDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketReceiveDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRedPacketRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRedPacketRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmSendRedPacketCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmSendRedPacketCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeNotifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawNotifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdCardRealNameAuthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdCardRealNameAuthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPaymentSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPaymentSecretResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRechargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbidGroupRedPacketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForbidGroupRedPacketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudWalletRecordDelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_wallet_cloud_wallet_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudWalletRecordDelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_wallet_cloud_wallet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloud_wallet_cloud_wallet_proto_goTypes,
		DependencyIndexes: file_cloud_wallet_cloud_wallet_proto_depIdxs,
		EnumInfos:         file_cloud_wallet_cloud_wallet_proto_enumTypes,
		MessageInfos:      file_cloud_wallet_cloud_wallet_proto_msgTypes,
	}.Build()
	File_cloud_wallet_cloud_wallet_proto = out.File
	file_cloud_wallet_cloud_wallet_proto_rawDesc = nil
	file_cloud_wallet_cloud_wallet_proto_goTypes = nil
	file_cloud_wallet_cloud_wallet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudWalletServiceClient is the client API for CloudWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudWalletServiceClient interface {
	// ==================================云钱包管理 ========
	// 获取云账户信息
	UserNcountAccount(ctx context.Context, in *UserNcountAccountReq, opts ...grpc.CallOption) (*UserNcountAccountResp, error)
	// 身份证实名认证
	IdCardRealNameAuth(ctx context.Context, in *IdCardRealNameAuthReq, opts ...grpc.CallOption) (*IdCardRealNameAuthResp, error)
	// 设置用户支付密码
	SetPaymentSecret(ctx context.Context, in *SetPaymentSecretReq, opts ...grpc.CallOption) (*SetPaymentSecretResp, error)
	// 校验用户支付密码
	CheckPaymentSecret(ctx context.Context, in *CheckPaymentSecretReq, opts ...grpc.CallOption) (*CheckPaymentSecretResp, error)
	// 云钱包收支明细
	CloudWalletRecordList(ctx context.Context, in *CloudWalletRecordListReq, opts ...grpc.CallOption) (*CloudWalletRecordListResp, error)
	// 绑定用户银行卡
	BindUserBankcard(ctx context.Context, in *BindUserBankcardReq, opts ...grpc.CallOption) (*BindUserBankcardResp, error)
	// 绑定用户银行卡确认code
	BindUserBankcardConfirm(ctx context.Context, in *BindUserBankcardConfirmReq, opts ...grpc.CallOption) (*BindUserBankcardConfirmResp, error)
	// 解绑用户银行卡
	UnBindingUserBankcard(ctx context.Context, in *UnBindingUserBankcardReq, opts ...grpc.CallOption) (*UnBindingUserBankcardResp, error)
	// 银行卡充值
	UserRecharge(ctx context.Context, in *UserRechargeReq, opts ...grpc.CallOption) (*UserRechargeResp, error)
	// 银行卡充值code 确认
	UserRechargeConfirm(ctx context.Context, in *UserRechargeConfirmReq, opts ...grpc.CallOption) (*UserRechargeConfirmResp, error)
	// 银行卡提现
	UserWithdrawal(ctx context.Context, in *DrawAccountReq, opts ...grpc.CallOption) (*DrawAccountResp, error)
	// 充值回调接口
	ChargeNotify(ctx context.Context, in *ChargeNotifyReq, opts ...grpc.CallOption) (*ChargeNotifyResp, error)
	// 提现回调接口
	WithDrawNotify(ctx context.Context, in *DrawNotifyReq, opts ...grpc.CallOption) (*DrawNotifyResp, error)
	// 发送红包接口
	SendRedPacket(ctx context.Context, in *SendRedPacketReq, opts ...grpc.CallOption) (*SendRedPacketResp, error)
	// 抢红包接口
	ClickRedPacket(ctx context.Context, in *ClickRedPacketReq, opts ...grpc.CallOption) (*ClickRedPacketResp, error)
	// 禁止群抢红包操作
	ForbidGroupRedPacket(ctx context.Context, in *ForbidGroupRedPacketReq, opts ...grpc.CallOption) (*ForbidGroupRedPacketResp, error)
	// 红包领取明细列表
	RedPacketReceiveDetail(ctx context.Context, in *RedPacketReceiveDetailReq, opts ...grpc.CallOption) (*RedPacketReceiveDetailResp, error)
	// 红包详情
	RedPacketInfo(ctx context.Context, in *RedPacketInfoReq, opts ...grpc.CallOption) (*RedPacketInfoResp, error)
	// 软删除云钱包收支明细记录
	CloudWalletRecordDel(ctx context.Context, in *CloudWalletRecordDelReq, opts ...grpc.CallOption) (*CloudWalletRecordDelResp, error)
}

type cloudWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudWalletServiceClient(cc grpc.ClientConnInterface) CloudWalletServiceClient {
	return &cloudWalletServiceClient{cc}
}

func (c *cloudWalletServiceClient) UserNcountAccount(ctx context.Context, in *UserNcountAccountReq, opts ...grpc.CallOption) (*UserNcountAccountResp, error) {
	out := new(UserNcountAccountResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/UserNcountAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) IdCardRealNameAuth(ctx context.Context, in *IdCardRealNameAuthReq, opts ...grpc.CallOption) (*IdCardRealNameAuthResp, error) {
	out := new(IdCardRealNameAuthResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/IdCardRealNameAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) SetPaymentSecret(ctx context.Context, in *SetPaymentSecretReq, opts ...grpc.CallOption) (*SetPaymentSecretResp, error) {
	out := new(SetPaymentSecretResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/SetPaymentSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CheckPaymentSecret(ctx context.Context, in *CheckPaymentSecretReq, opts ...grpc.CallOption) (*CheckPaymentSecretResp, error) {
	out := new(CheckPaymentSecretResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/CheckPaymentSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CloudWalletRecordList(ctx context.Context, in *CloudWalletRecordListReq, opts ...grpc.CallOption) (*CloudWalletRecordListResp, error) {
	out := new(CloudWalletRecordListResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/CloudWalletRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) BindUserBankcard(ctx context.Context, in *BindUserBankcardReq, opts ...grpc.CallOption) (*BindUserBankcardResp, error) {
	out := new(BindUserBankcardResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/BindUserBankcard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) BindUserBankcardConfirm(ctx context.Context, in *BindUserBankcardConfirmReq, opts ...grpc.CallOption) (*BindUserBankcardConfirmResp, error) {
	out := new(BindUserBankcardConfirmResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/BindUserBankcardConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UnBindingUserBankcard(ctx context.Context, in *UnBindingUserBankcardReq, opts ...grpc.CallOption) (*UnBindingUserBankcardResp, error) {
	out := new(UnBindingUserBankcardResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/UnBindingUserBankcard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UserRecharge(ctx context.Context, in *UserRechargeReq, opts ...grpc.CallOption) (*UserRechargeResp, error) {
	out := new(UserRechargeResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/UserRecharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UserRechargeConfirm(ctx context.Context, in *UserRechargeConfirmReq, opts ...grpc.CallOption) (*UserRechargeConfirmResp, error) {
	out := new(UserRechargeConfirmResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/UserRechargeConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) UserWithdrawal(ctx context.Context, in *DrawAccountReq, opts ...grpc.CallOption) (*DrawAccountResp, error) {
	out := new(DrawAccountResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/UserWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ChargeNotify(ctx context.Context, in *ChargeNotifyReq, opts ...grpc.CallOption) (*ChargeNotifyResp, error) {
	out := new(ChargeNotifyResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/ChargeNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) WithDrawNotify(ctx context.Context, in *DrawNotifyReq, opts ...grpc.CallOption) (*DrawNotifyResp, error) {
	out := new(DrawNotifyResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/WithDrawNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) SendRedPacket(ctx context.Context, in *SendRedPacketReq, opts ...grpc.CallOption) (*SendRedPacketResp, error) {
	out := new(SendRedPacketResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/SendRedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ClickRedPacket(ctx context.Context, in *ClickRedPacketReq, opts ...grpc.CallOption) (*ClickRedPacketResp, error) {
	out := new(ClickRedPacketResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/ClickRedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) ForbidGroupRedPacket(ctx context.Context, in *ForbidGroupRedPacketReq, opts ...grpc.CallOption) (*ForbidGroupRedPacketResp, error) {
	out := new(ForbidGroupRedPacketResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/ForbidGroupRedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) RedPacketReceiveDetail(ctx context.Context, in *RedPacketReceiveDetailReq, opts ...grpc.CallOption) (*RedPacketReceiveDetailResp, error) {
	out := new(RedPacketReceiveDetailResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/RedPacketReceiveDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) RedPacketInfo(ctx context.Context, in *RedPacketInfoReq, opts ...grpc.CallOption) (*RedPacketInfoResp, error) {
	out := new(RedPacketInfoResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/RedPacketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudWalletServiceClient) CloudWalletRecordDel(ctx context.Context, in *CloudWalletRecordDelReq, opts ...grpc.CallOption) (*CloudWalletRecordDelResp, error) {
	out := new(CloudWalletRecordDelResp)
	err := c.cc.Invoke(ctx, "/cloud_wallet.CloudWalletService/CloudWalletRecordDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudWalletServiceServer is the server API for CloudWalletService service.
type CloudWalletServiceServer interface {
	// ==================================云钱包管理 ========
	// 获取云账户信息
	UserNcountAccount(context.Context, *UserNcountAccountReq) (*UserNcountAccountResp, error)
	// 身份证实名认证
	IdCardRealNameAuth(context.Context, *IdCardRealNameAuthReq) (*IdCardRealNameAuthResp, error)
	// 设置用户支付密码
	SetPaymentSecret(context.Context, *SetPaymentSecretReq) (*SetPaymentSecretResp, error)
	// 校验用户支付密码
	CheckPaymentSecret(context.Context, *CheckPaymentSecretReq) (*CheckPaymentSecretResp, error)
	// 云钱包收支明细
	CloudWalletRecordList(context.Context, *CloudWalletRecordListReq) (*CloudWalletRecordListResp, error)
	// 绑定用户银行卡
	BindUserBankcard(context.Context, *BindUserBankcardReq) (*BindUserBankcardResp, error)
	// 绑定用户银行卡确认code
	BindUserBankcardConfirm(context.Context, *BindUserBankcardConfirmReq) (*BindUserBankcardConfirmResp, error)
	// 解绑用户银行卡
	UnBindingUserBankcard(context.Context, *UnBindingUserBankcardReq) (*UnBindingUserBankcardResp, error)
	// 银行卡充值
	UserRecharge(context.Context, *UserRechargeReq) (*UserRechargeResp, error)
	// 银行卡充值code 确认
	UserRechargeConfirm(context.Context, *UserRechargeConfirmReq) (*UserRechargeConfirmResp, error)
	// 银行卡提现
	UserWithdrawal(context.Context, *DrawAccountReq) (*DrawAccountResp, error)
	// 充值回调接口
	ChargeNotify(context.Context, *ChargeNotifyReq) (*ChargeNotifyResp, error)
	// 提现回调接口
	WithDrawNotify(context.Context, *DrawNotifyReq) (*DrawNotifyResp, error)
	// 发送红包接口
	SendRedPacket(context.Context, *SendRedPacketReq) (*SendRedPacketResp, error)
	// 抢红包接口
	ClickRedPacket(context.Context, *ClickRedPacketReq) (*ClickRedPacketResp, error)
	// 禁止群抢红包操作
	ForbidGroupRedPacket(context.Context, *ForbidGroupRedPacketReq) (*ForbidGroupRedPacketResp, error)
	// 红包领取明细列表
	RedPacketReceiveDetail(context.Context, *RedPacketReceiveDetailReq) (*RedPacketReceiveDetailResp, error)
	// 红包详情
	RedPacketInfo(context.Context, *RedPacketInfoReq) (*RedPacketInfoResp, error)
	// 软删除云钱包收支明细记录
	CloudWalletRecordDel(context.Context, *CloudWalletRecordDelReq) (*CloudWalletRecordDelResp, error)
}

// UnimplementedCloudWalletServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudWalletServiceServer struct {
}

func (*UnimplementedCloudWalletServiceServer) UserNcountAccount(context.Context, *UserNcountAccountReq) (*UserNcountAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNcountAccount not implemented")
}
func (*UnimplementedCloudWalletServiceServer) IdCardRealNameAuth(context.Context, *IdCardRealNameAuthReq) (*IdCardRealNameAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdCardRealNameAuth not implemented")
}
func (*UnimplementedCloudWalletServiceServer) SetPaymentSecret(context.Context, *SetPaymentSecretReq) (*SetPaymentSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPaymentSecret not implemented")
}
func (*UnimplementedCloudWalletServiceServer) CheckPaymentSecret(context.Context, *CheckPaymentSecretReq) (*CheckPaymentSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPaymentSecret not implemented")
}
func (*UnimplementedCloudWalletServiceServer) CloudWalletRecordList(context.Context, *CloudWalletRecordListReq) (*CloudWalletRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloudWalletRecordList not implemented")
}
func (*UnimplementedCloudWalletServiceServer) BindUserBankcard(context.Context, *BindUserBankcardReq) (*BindUserBankcardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserBankcard not implemented")
}
func (*UnimplementedCloudWalletServiceServer) BindUserBankcardConfirm(context.Context, *BindUserBankcardConfirmReq) (*BindUserBankcardConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserBankcardConfirm not implemented")
}
func (*UnimplementedCloudWalletServiceServer) UnBindingUserBankcard(context.Context, *UnBindingUserBankcardReq) (*UnBindingUserBankcardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindingUserBankcard not implemented")
}
func (*UnimplementedCloudWalletServiceServer) UserRecharge(context.Context, *UserRechargeReq) (*UserRechargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRecharge not implemented")
}
func (*UnimplementedCloudWalletServiceServer) UserRechargeConfirm(context.Context, *UserRechargeConfirmReq) (*UserRechargeConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRechargeConfirm not implemented")
}
func (*UnimplementedCloudWalletServiceServer) UserWithdrawal(context.Context, *DrawAccountReq) (*DrawAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWithdrawal not implemented")
}
func (*UnimplementedCloudWalletServiceServer) ChargeNotify(context.Context, *ChargeNotifyReq) (*ChargeNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeNotify not implemented")
}
func (*UnimplementedCloudWalletServiceServer) WithDrawNotify(context.Context, *DrawNotifyReq) (*DrawNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithDrawNotify not implemented")
}
func (*UnimplementedCloudWalletServiceServer) SendRedPacket(context.Context, *SendRedPacketReq) (*SendRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedPacket not implemented")
}
func (*UnimplementedCloudWalletServiceServer) ClickRedPacket(context.Context, *ClickRedPacketReq) (*ClickRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickRedPacket not implemented")
}
func (*UnimplementedCloudWalletServiceServer) ForbidGroupRedPacket(context.Context, *ForbidGroupRedPacketReq) (*ForbidGroupRedPacketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForbidGroupRedPacket not implemented")
}
func (*UnimplementedCloudWalletServiceServer) RedPacketReceiveDetail(context.Context, *RedPacketReceiveDetailReq) (*RedPacketReceiveDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketReceiveDetail not implemented")
}
func (*UnimplementedCloudWalletServiceServer) RedPacketInfo(context.Context, *RedPacketInfoReq) (*RedPacketInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketInfo not implemented")
}
func (*UnimplementedCloudWalletServiceServer) CloudWalletRecordDel(context.Context, *CloudWalletRecordDelReq) (*CloudWalletRecordDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloudWalletRecordDel not implemented")
}

func RegisterCloudWalletServiceServer(s *grpc.Server, srv CloudWalletServiceServer) {
	s.RegisterService(&_CloudWalletService_serviceDesc, srv)
}

func _CloudWalletService_UserNcountAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNcountAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserNcountAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/UserNcountAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserNcountAccount(ctx, req.(*UserNcountAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_IdCardRealNameAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdCardRealNameAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).IdCardRealNameAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/IdCardRealNameAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).IdCardRealNameAuth(ctx, req.(*IdCardRealNameAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_SetPaymentSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPaymentSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).SetPaymentSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/SetPaymentSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).SetPaymentSecret(ctx, req.(*SetPaymentSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CheckPaymentSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPaymentSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CheckPaymentSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/CheckPaymentSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CheckPaymentSecret(ctx, req.(*CheckPaymentSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CloudWalletRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudWalletRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CloudWalletRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/CloudWalletRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CloudWalletRecordList(ctx, req.(*CloudWalletRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_BindUserBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserBankcardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).BindUserBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/BindUserBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).BindUserBankcard(ctx, req.(*BindUserBankcardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_BindUserBankcardConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserBankcardConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).BindUserBankcardConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/BindUserBankcardConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).BindUserBankcardConfirm(ctx, req.(*BindUserBankcardConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UnBindingUserBankcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindingUserBankcardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UnBindingUserBankcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/UnBindingUserBankcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UnBindingUserBankcard(ctx, req.(*UnBindingUserBankcardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UserRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRechargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/UserRecharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserRecharge(ctx, req.(*UserRechargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UserRechargeConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRechargeConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserRechargeConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/UserRechargeConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserRechargeConfirm(ctx, req.(*UserRechargeConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_UserWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).UserWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/UserWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).UserWithdrawal(ctx, req.(*DrawAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ChargeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ChargeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/ChargeNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ChargeNotify(ctx, req.(*ChargeNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_WithDrawNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).WithDrawNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/WithDrawNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).WithDrawNotify(ctx, req.(*DrawNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_SendRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).SendRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/SendRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).SendRedPacket(ctx, req.(*SendRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ClickRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ClickRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/ClickRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ClickRedPacket(ctx, req.(*ClickRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_ForbidGroupRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidGroupRedPacketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).ForbidGroupRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/ForbidGroupRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).ForbidGroupRedPacket(ctx, req.(*ForbidGroupRedPacketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_RedPacketReceiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketReceiveDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).RedPacketReceiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/RedPacketReceiveDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).RedPacketReceiveDetail(ctx, req.(*RedPacketReceiveDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_RedPacketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).RedPacketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/RedPacketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).RedPacketInfo(ctx, req.(*RedPacketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudWalletService_CloudWalletRecordDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudWalletRecordDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudWalletServiceServer).CloudWalletRecordDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_wallet.CloudWalletService/CloudWalletRecordDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudWalletServiceServer).CloudWalletRecordDel(ctx, req.(*CloudWalletRecordDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudWalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud_wallet.CloudWalletService",
	HandlerType: (*CloudWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserNcountAccount",
			Handler:    _CloudWalletService_UserNcountAccount_Handler,
		},
		{
			MethodName: "IdCardRealNameAuth",
			Handler:    _CloudWalletService_IdCardRealNameAuth_Handler,
		},
		{
			MethodName: "SetPaymentSecret",
			Handler:    _CloudWalletService_SetPaymentSecret_Handler,
		},
		{
			MethodName: "CheckPaymentSecret",
			Handler:    _CloudWalletService_CheckPaymentSecret_Handler,
		},
		{
			MethodName: "CloudWalletRecordList",
			Handler:    _CloudWalletService_CloudWalletRecordList_Handler,
		},
		{
			MethodName: "BindUserBankcard",
			Handler:    _CloudWalletService_BindUserBankcard_Handler,
		},
		{
			MethodName: "BindUserBankcardConfirm",
			Handler:    _CloudWalletService_BindUserBankcardConfirm_Handler,
		},
		{
			MethodName: "UnBindingUserBankcard",
			Handler:    _CloudWalletService_UnBindingUserBankcard_Handler,
		},
		{
			MethodName: "UserRecharge",
			Handler:    _CloudWalletService_UserRecharge_Handler,
		},
		{
			MethodName: "UserRechargeConfirm",
			Handler:    _CloudWalletService_UserRechargeConfirm_Handler,
		},
		{
			MethodName: "UserWithdrawal",
			Handler:    _CloudWalletService_UserWithdrawal_Handler,
		},
		{
			MethodName: "ChargeNotify",
			Handler:    _CloudWalletService_ChargeNotify_Handler,
		},
		{
			MethodName: "WithDrawNotify",
			Handler:    _CloudWalletService_WithDrawNotify_Handler,
		},
		{
			MethodName: "SendRedPacket",
			Handler:    _CloudWalletService_SendRedPacket_Handler,
		},
		{
			MethodName: "ClickRedPacket",
			Handler:    _CloudWalletService_ClickRedPacket_Handler,
		},
		{
			MethodName: "ForbidGroupRedPacket",
			Handler:    _CloudWalletService_ForbidGroupRedPacket_Handler,
		},
		{
			MethodName: "RedPacketReceiveDetail",
			Handler:    _CloudWalletService_RedPacketReceiveDetail_Handler,
		},
		{
			MethodName: "RedPacketInfo",
			Handler:    _CloudWalletService_RedPacketInfo_Handler,
		},
		{
			MethodName: "CloudWalletRecordDel",
			Handler:    _CloudWalletService_CloudWalletRecordDel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud_wallet/cloud_wallet.proto",
}
